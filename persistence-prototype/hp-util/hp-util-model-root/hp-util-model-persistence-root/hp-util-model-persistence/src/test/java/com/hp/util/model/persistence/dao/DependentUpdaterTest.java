/*
 * Copyright (c) 2012 Hewlett-Packard Development Company, L.P. and others. All rights reserved.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v1.0 which accompanies this distribution,
 * and is available at http://www.eclipse.org/legal/epl-v10.html
 */
package com.hp.util.model.persistence.dao;

import java.util.Arrays;
import java.util.Collection;

import org.easymock.EasyMock;
import org.junit.Test;

import com.hp.util.common.Provider;
import com.hp.util.common.model.AbstractIdentifiable;
import com.hp.util.common.type.Id;
import com.hp.util.model.persistence.dao.DependentUpdater.Delegate;

/**
 * @author Fabiel Zuniga
 */
@SuppressWarnings({ "javadoc", "static-method" })
public class DependentUpdaterTest {

    @Test
    @SuppressWarnings("unchecked")
    public void testUpdateDependentsAutogeneratedKeys() throws Exception {
        // Storable 1 will be deleted
        // Storable 2 will be updated
        // Identifiable 3 will be added

        Id<IdentifiableMock, Long> id1 = Id.valueOf(Long.valueOf(1));
        Id<IdentifiableMock, Long> id2 = Id.valueOf(Long.valueOf(2));

        StorableMock storable1 = new StorableMock(id1.getValue());
        StorableMock storable2 = new StorableMock(id2.getValue());

        IdentifiableMock dto2 = new IdentifiableMock(id2);
        IdentifiableMock dto3 = new IdentifiableMock();

        Delegate<StorableMock, IdentifiableMock> delegate = EasyMock.createMock(Delegate.class);

        Collection<StorableMock> currentDependents = Arrays.asList(storable1, storable2);
        Collection<IdentifiableMock> newDependents = Arrays.asList(dto2, dto3);

        delegate.delete(EasyMock.same(storable1));
        delegate.update(EasyMock.same(storable2), EasyMock.same(dto2));
        delegate.add(EasyMock.same(dto3));

        EasyMock.replay(delegate);

        DependentUpdater.updateDependents(currentDependents, newDependents, new IdProvider(), delegate);

        EasyMock.verify(delegate);
    }

    @Test
    @SuppressWarnings("unchecked")
    public void testUpdateDependentsNaturalKeys() throws Exception {
        // Storable 1 will be deleted
        // Storable 2 will be updated
        // Identifiable 3 will be added

        Id<IdentifiableMock, Long> id1 = Id.valueOf(Long.valueOf(1));
        Id<IdentifiableMock, Long> id2 = Id.valueOf(Long.valueOf(2));
        Id<IdentifiableMock, Long> id3 = Id.valueOf(Long.valueOf(3));

        StorableMock storable1 = new StorableMock(id1.getValue());
        StorableMock storable2 = new StorableMock(id2.getValue());

        IdentifiableMock dto2 = new IdentifiableMock(id2);
        IdentifiableMock dto3 = new IdentifiableMock(id3);

        Delegate<StorableMock, IdentifiableMock> delegate = EasyMock.createMock(Delegate.class);

        Collection<StorableMock> currentDependents = Arrays.asList(storable1, storable2);
        Collection<IdentifiableMock> newDependents = Arrays.asList(dto2, dto3);

        delegate.delete(EasyMock.same(storable1));
        delegate.update(EasyMock.same(storable2), EasyMock.same(dto2));
        delegate.add(EasyMock.same(dto3));

        EasyMock.replay(delegate);

        DependentUpdater.updateDependents(currentDependents, newDependents, new IdProvider(), delegate);

        EasyMock.verify(delegate);
    }

    private static final class IdentifiableMock extends AbstractIdentifiable<IdentifiableMock, Long> {

        protected IdentifiableMock() {
            super();
        }

        protected IdentifiableMock(Id<IdentifiableMock, Long> id) {
            super(id);
        }
    }

    private static final class StorableMock {

        private final Long id;

        public StorableMock(Long id) {
            this.id = id;
        }

        public Long getId() {
            return this.id;
        }
    }

    private static final class IdProvider implements Provider<Long, StorableMock> {

        @Override
        public Long get(StorableMock entity) {
            return entity.getId();
        }
    }
}

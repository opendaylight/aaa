/*
 * Copyright (c) 2016 Inocybe Technologies. and others.  All rights reserved.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v1.0 which accompanies this distribution,
 * and is available at http://www.eclipse.org/legal/epl-v10.html
 */

package org.opendaylight.aaa.cert.api;

import java.security.KeyStore;

import org.opendaylight.yang.gen.v1.urn.opendaylight.yang.aaa.cert.mdsal.rev160321.key.stores.SslData;

/**
 * IAaaCertMdsalProvider define the basic API required by AaaCertMdsalProvider
 *
 * @author mserngawy
 *
 */
public interface IAaaCertMdsalProvider {

    /**
     * Add SslData object to Mdsal with default values of keyAlg=RSA, keySize=2048, validity=356
     * and signAlg=SHA1WithRSAEncryption
     *
     * @param bundleName name of the bundle that will use the keystores
     * @param odlKeystoreName
     * @param odlKeystorePwd
     * @param odlKeystoreAlias
     * @param odlKeystoreDname
     * @param trustKeystoreName
     * @param trustKeystorePwd
     * @param cipherSuites cipher suites that will be used by the SSL connection
     * @return the created SslData object
     */
    SslData addSslDataKeystores(String bundleName, String odlKeystoreName, String odlKeystorePwd,
            String odlKeystoreAlias, String odlKeystoreDname, String trustKeystoreName,
            String trustKeystorePwd, String[] cipherSuites);

    /**
     * Add SslData object to Mdsal
     *
     * @param bundleName name of the bundle that will use the keystores
     * @param odlKeystoreName
     * @param odlKeystorePwd
     * @param odlKeystoreAlias
     * @param odlKeystoreDname
     * @param odlKeystoreKeyAlg Key algorithm to create secret key i.e RSA
     * @param odlKeystoreSignAlg sign algorithm i.e SHA1WithRSAEncryption
     * @param odlKeystoreKeysize the key size i.e 1024
     * @param odlKeystoreValidity validity if the key
     * @param trustKeystoreName
     * @param trustKeystorePwd
     * @param cipherSuites cipher suites that will be used by the SSL connection
     * @return the created SslData object
     */
    SslData addSslDataKeystores(String bundleName, String odlKeystoreName, String odlKeystorePwd,
            String odlKeystoreAlias, String odlKeystoreDname, String odlKeystoreKeyAlg,
            String odlKeystoreSignAlg, int odlKeystoreKeysize, int odlKeystoreValidity,
            String trustKeystoreName, String trustKeystorePwd, String[] cipherSuites);

    /**
     * add a ODL signed certificate that is signed by a CA based on a certificate request generated by
     * ODL keystore
     *
     * @param bundleName name of the bundle that will use the keystores
     * @param alias for the certificate
     * @param certificate as string
     * @return true for successful added certificate
     */
    boolean addODLStoreSignedCertificate(String bundleName, String alias, String certificate);

    /**
     * Add a network node certificate to the trust keystore
     *
     * @param bundleName name of the bundle that will use the keystores
     * @param alias
     * @param certificate
     * @return true for successful added certificate
     */
    boolean addTrustNodeCertificate(String bundleName, String alias, String certificate);

    /**
     * Export the ODL keystore and Trust keystore to a file under karaf ssl/ directory
     *
     * @param bundleName name of the bundle that will use the keystores
     */
    void exportSslDataKeystores(String bundleName);

    /**
     * Generate a certificate request to be signed by a CA.
     *
     * @param bundleName name of the bundle that will use the keystores
     * @param signAlg the sign algorithm 
     * @param withTag boolean to add cert-req tag to the return string
     * @return certificate request as string
     */
    String genODLKeyStoreCertificateReq(String bundleName, String signAlg, boolean withTag);

    /**
     * Generate a certificate request to be signed by a CA with default sign algorithm SHA1WithRSAEncryption
     *
     * @param bundleName name of the bundle that will use the keystores
     * @param withTag boolean to add cert-req tag to the return string
     * @return certificate request as string
     */
    public String genODLKeyStoreCertificateReq(String bundleName, boolean withTag);

    /**
     * Get the ODL keystore certificate
     *
     * @param bundleName name of the bundle that will use the keystores
     * @param withTag  boolean to add cert tag to the return string
     * @return certificate as string
     */
    String getODLStoreCertificate(String bundleName, boolean withTag);

    /**
     * Get a Network node certificate from the Trust keystore
     *
     * @param bundleName name of the bundle that will use the keystores
     * @param alias of the certificate
     * @param withTag  boolean to add cert tag to the return string
     * @return certificate as string
     */
    String getTrustStoreCertificate(String bundleName, String alias,  boolean withTag);

    /**
     * Get the SslData
     *
     * @param bundleName name of the bundle that will use the keystores
     * @return the SslData
     */
    SslData getSslData(String bundleName);

    /**
     * Get the ODL keystore object to be used by the SSLContext to establish the SSL connection.
     *
     * @param bundleName name of the bundle that will use the keystores
     * @return ODL keystore
     */
    KeyStore getODLKeyStore(String bundleName);

    /**
     * Get the trust keystore object to be used by the SSLContext to establish the SSL connection.
     *
     * @param bundleName name of the bundle that will use the keystores
     * @return Trust keystore
     */
    KeyStore getTrustKeyStore(String bundleName);

    /**
     * Get array of cipher suites that will be used in to establish the SSL connection.
     *
     * @param bundleName name of the bundle that will use the keystores
     * @return Cipher Suites
     */
    String[] getCipherSuites(String bundleName);

    /**
     * Create SslData based on pre-established keystores for ODL and network nodes.
     *
     * @param bundleName name of the bundle that will use the keystores
     * @param odlKeystoreName 
     * @param odlKeystorePwd must be the same as the imported ODL keystore's password
     * @param odlKeystoreAlias must be the same as the imported ODL keystore's certificate alias
     * @param odlKeyStore a valid keystore
     * @param trustKeystoreName
     * @param trustKeystorePwd must be the same as the imported Trust keystore's password
     * @param trustKeyStore a valid keystore
     * @param cipherSuites cipher suites that will be used by the SSL connection
     * @return the created SslData object
     */
    SslData importSslDataKeystores(String bundleName, String odlKeystoreName, String odlKeystorePwd,
                        String odlKeystoreAlias, KeyStore odlKeyStore, String trustKeystoreName,
                        String trustKeystorePwd, KeyStore trustKeyStore, String[] cipherSuites);

    /**
     * Delete the SslData from Mdsal
     *
     * @param bundleName name of the bundle that will use the keystores
     * @return true for succeed delete
     */
    boolean removeSslData(String bundleName);

    /**
     * Update the SslData
     *
     * @param sslData
     * @return the updated SslData object
     */
    SslData updateSslData(SslData sslData);

}

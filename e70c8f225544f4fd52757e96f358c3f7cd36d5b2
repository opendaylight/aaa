{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "0d6b6070_84363116",
        "filename": "aaa-encrypt-service/impl/src/main/java/org/opendaylight/aaa/encrypt/impl/AAAEncryptionServiceImpl.java",
        "patchSetId": 3
      },
      "lineNbr": 97,
      "author": {
        "id": 1927
      },
      "writtenOn": "2025-01-22T23:15:35Z",
      "side": 1,
      "message": "`encrypt()` \u0026 `decrypt()` do not share the ciphers, hence no need for synchronization between them.",
      "revId": "e70c8f225544f4fd52757e96f358c3f7cd36d5b2",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e926587e_0d1b2df5",
        "filename": "aaa-encrypt-service/impl/src/main/java/org/opendaylight/aaa/encrypt/impl/AAAEncryptionServiceImpl.java",
        "patchSetId": 3
      },
      "lineNbr": 97,
      "author": {
        "id": 8449
      },
      "writtenOn": "2025-01-23T17:24:01Z",
      "side": 1,
      "message": "Correct, synchronization between encrypt and decrypt is not necessary. However, based on benchmark test, using synchronized on encrypt and decrypt method performs slightly better.\n\nUsing synchronized block instead with ConcurrentHashMap:\n```\nBenchmark                                                      (iterations)  Mode  Cnt  Score    Error  Units\nAAAEncryptionBenchmark.decryptionAfterExceptionThrowBenchmark           100  avgt   10  0.047 ±  0.002  ms/op\nAAAEncryptionBenchmark.decryptionAfterExceptionThrowBenchmark          1000  avgt   10  0.045 ±  0.001  ms/op\nAAAEncryptionBenchmark.shortStringBenchmark                             100  avgt   10  0.002 ±  0.001  ms/op\nAAAEncryptionBenchmark.shortStringBenchmark                            1000  avgt   10  0.002 ±  0.001  ms/op\n```\n\nUsing synchronized block without ConcurrentHashMap:\n```\n        synchronized (DEC_LOCK) {\n            try {\n                if (decCypher \u003d\u003d null) {\n                    decCypher \u003d initCipher(Cipher.DECRYPT_MODE);\n                }\n                return decCypher.doFinal(requireNonNull(encryptedData));\n            } catch (IllegalBlockSizeException | BadPaddingException e) {\n                // Remove Cipher after exception and re-throw.\n                decCypher \u003d null;\n                throw e;\n            }\n        }\n```\nresults:\n```\nBenchmark                                                      (iterations)  Mode  Cnt  Score    Error  Units\nAAAEncryptionBenchmark.decryptionAfterExceptionThrowBenchmark           100  avgt   10  0.051 ±  0.004  ms/op\nAAAEncryptionBenchmark.decryptionAfterExceptionThrowBenchmark          1000  avgt   10  0.051 ±  0.010  ms/op\nAAAEncryptionBenchmark.shortStringBenchmark                             100  avgt   10  0.002 ±  0.001  ms/op\nAAAEncryptionBenchmark.shortStringBenchmark                            1000  avgt   10  0.002 ±  0.001  ms/op\n\n```\n\nTo compare, benchmark results for ConcurrentHashMap with synchronized method:\n```\nBenchmark                                                      (iterations)  Mode  Cnt  Score    Error  Units\nAAAEncryptionBenchmark.decryptionAfterExceptionThrowBenchmark           100  avgt   10  0.040 ±  0.002  ms/op\nAAAEncryptionBenchmark.decryptionAfterExceptionThrowBenchmark          1000  avgt   10  0.040 ±  0.001  ms/op\nAAAEncryptionBenchmark.shortStringBenchmark                             100  avgt   10  0.001 ±  0.001  ms/op\nAAAEncryptionBenchmark.shortStringBenchmark                            1000  avgt   10  0.001 ±  0.001  ms/op\n```\n\nIf required, I can provide a benchmark class which I use for testing.",
      "parentUuid": "0d6b6070_84363116",
      "revId": "e70c8f225544f4fd52757e96f358c3f7cd36d5b2",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "631a6ccc_91dfff85",
        "filename": "aaa-encrypt-service/impl/src/test/java/org/opendaylight/aaa/encrypt/impl/AAAEncryptServiceImplTest.java",
        "patchSetId": 3
      },
      "lineNbr": 149,
      "author": {
        "id": 1927
      },
      "writtenOn": "2025-01-22T23:15:35Z",
      "side": 1,
      "message": "This comment is a little confusing since `setup()` creates a new `AAAEncryptionServiceImpl` with new encrypt key \u0026 password generated by `OSGiEncryptionServiceConfigurator.generateConfig()`, not just a new cipher.",
      "revId": "e70c8f225544f4fd52757e96f358c3f7cd36d5b2",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "27e9d6a8_0bec16d3",
        "filename": "aaa-encrypt-service/impl/src/test/java/org/opendaylight/aaa/encrypt/impl/AAAEncryptServiceImplTest.java",
        "patchSetId": 3
      },
      "lineNbr": 149,
      "author": {
        "id": 8449
      },
      "writtenOn": "2025-01-23T17:24:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "631a6ccc_91dfff85",
      "revId": "e70c8f225544f4fd52757e96f358c3f7cd36d5b2",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    }
  ]
}
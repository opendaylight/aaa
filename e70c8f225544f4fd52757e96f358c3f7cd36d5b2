{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "0d6b6070_84363116",
        "filename": "aaa-encrypt-service/impl/src/main/java/org/opendaylight/aaa/encrypt/impl/AAAEncryptionServiceImpl.java",
        "patchSetId": 3
      },
      "lineNbr": 97,
      "author": {
        "id": 1927
      },
      "writtenOn": "2025-01-22T23:15:35Z",
      "side": 1,
      "message": "`encrypt()` \u0026 `decrypt()` do not share the ciphers, hence no need for synchronization between them.",
      "revId": "e70c8f225544f4fd52757e96f358c3f7cd36d5b2",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e926587e_0d1b2df5",
        "filename": "aaa-encrypt-service/impl/src/main/java/org/opendaylight/aaa/encrypt/impl/AAAEncryptionServiceImpl.java",
        "patchSetId": 3
      },
      "lineNbr": 97,
      "author": {
        "id": 8449
      },
      "writtenOn": "2025-01-23T17:24:01Z",
      "side": 1,
      "message": "Correct, synchronization between encrypt and decrypt is not necessary. However, based on benchmark test, using synchronized on encrypt and decrypt method performs slightly better.\n\nUsing synchronized block instead with ConcurrentHashMap:\n```\nBenchmark                                                      (iterations)  Mode  Cnt  Score    Error  Units\nAAAEncryptionBenchmark.decryptionAfterExceptionThrowBenchmark           100  avgt   10  0.047 ±  0.002  ms/op\nAAAEncryptionBenchmark.decryptionAfterExceptionThrowBenchmark          1000  avgt   10  0.045 ±  0.001  ms/op\nAAAEncryptionBenchmark.shortStringBenchmark                             100  avgt   10  0.002 ±  0.001  ms/op\nAAAEncryptionBenchmark.shortStringBenchmark                            1000  avgt   10  0.002 ±  0.001  ms/op\n```\n\nUsing synchronized block without ConcurrentHashMap:\n```\n        synchronized (DEC_LOCK) {\n            try {\n                if (decCypher \u003d\u003d null) {\n                    decCypher \u003d initCipher(Cipher.DECRYPT_MODE);\n                }\n                return decCypher.doFinal(requireNonNull(encryptedData));\n            } catch (IllegalBlockSizeException | BadPaddingException e) {\n                // Remove Cipher after exception and re-throw.\n                decCypher \u003d null;\n                throw e;\n            }\n        }\n```\nresults:\n```\nBenchmark                                                      (iterations)  Mode  Cnt  Score    Error  Units\nAAAEncryptionBenchmark.decryptionAfterExceptionThrowBenchmark           100  avgt   10  0.051 ±  0.004  ms/op\nAAAEncryptionBenchmark.decryptionAfterExceptionThrowBenchmark          1000  avgt   10  0.051 ±  0.010  ms/op\nAAAEncryptionBenchmark.shortStringBenchmark                             100  avgt   10  0.002 ±  0.001  ms/op\nAAAEncryptionBenchmark.shortStringBenchmark                            1000  avgt   10  0.002 ±  0.001  ms/op\n\n```\n\nTo compare, benchmark results for ConcurrentHashMap with synchronized method:\n```\nBenchmark                                                      (iterations)  Mode  Cnt  Score    Error  Units\nAAAEncryptionBenchmark.decryptionAfterExceptionThrowBenchmark           100  avgt   10  0.040 ±  0.002  ms/op\nAAAEncryptionBenchmark.decryptionAfterExceptionThrowBenchmark          1000  avgt   10  0.040 ±  0.001  ms/op\nAAAEncryptionBenchmark.shortStringBenchmark                             100  avgt   10  0.001 ±  0.001  ms/op\nAAAEncryptionBenchmark.shortStringBenchmark                            1000  avgt   10  0.001 ±  0.001  ms/op\n```\n\nIf required, I can provide a benchmark class which I use for testing.",
      "parentUuid": "0d6b6070_84363116",
      "revId": "e70c8f225544f4fd52757e96f358c3f7cd36d5b2",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eb70def0_f65b6166",
        "filename": "aaa-encrypt-service/impl/src/main/java/org/opendaylight/aaa/encrypt/impl/AAAEncryptionServiceImpl.java",
        "patchSetId": 3
      },
      "lineNbr": 97,
      "author": {
        "id": 1927
      },
      "writtenOn": "2025-01-23T17:52:21Z",
      "side": 1,
      "message": "That\u0027s interesting and not sure how that\u0027s possible. Can you share the benchmark class?",
      "parentUuid": "e926587e_0d1b2df5",
      "revId": "e70c8f225544f4fd52757e96f358c3f7cd36d5b2",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d546b274_4072ba3f",
        "filename": "aaa-encrypt-service/impl/src/main/java/org/opendaylight/aaa/encrypt/impl/AAAEncryptionServiceImpl.java",
        "patchSetId": 3
      },
      "lineNbr": 97,
      "author": {
        "id": 8449
      },
      "writtenOn": "2025-01-24T09:38:17Z",
      "side": 1,
      "message": "The benchmark class is included in patchset 5\nhttps://git.opendaylight.org/gerrit/c/aaa/+/114910/5\n\nBenchmark starts with:\n mvn clean install -DskipTests -Dodlparent.spotbugs.skip\u003dtrue -Pbenchmarks",
      "parentUuid": "eb70def0_f65b6166",
      "revId": "e70c8f225544f4fd52757e96f358c3f7cd36d5b2",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "785f75ba_ee6dc6e8",
        "filename": "aaa-encrypt-service/impl/src/main/java/org/opendaylight/aaa/encrypt/impl/AAAEncryptionServiceImpl.java",
        "patchSetId": 3
      },
      "lineNbr": 97,
      "author": {
        "id": 1927
      },
      "writtenOn": "2025-01-24T19:57:08Z",
      "side": 1,
      "message": "Okay, so I took the benchmark class and changed the time unit to `TimeUnit.MICROSECONDS` and I got the following numbers:\n\n```\nBenchmark                                                      (iterations)  Mode  Cnt   Score   Error  Units\nAAAEncryptionBenchmark.decryptionAfterExceptionThrowBenchmark           100  avgt   10  35.314 ± 0.633  us/op\nAAAEncryptionBenchmark.decryptionAfterExceptionThrowBenchmark          1000  avgt   10  36.474 ± 0.728  us/op\nAAAEncryptionBenchmark.shortStringBenchmark                             100  avgt   10   2.278 ± 0.168  us/op\nAAAEncryptionBenchmark.shortStringBenchmark                            1000  avgt   10   2.112 ± 0.049  us/op\n```\n\nWhen encrypt \u0026 decrypt are synchronized independently, I get these:\n```\nBenchmark                                                      (iterations)  Mode  Cnt   Score   Error  Units\nAAAEncryptionBenchmark.decryptionAfterExceptionThrowBenchmark           100  avgt   10  31.473 ± 0.888  us/op\nAAAEncryptionBenchmark.decryptionAfterExceptionThrowBenchmark          1000  avgt   10  31.649 ± 0.626  us/op\nAAAEncryptionBenchmark.shortStringBenchmark                             100  avgt   10   1.381 ± 0.052  us/op\nAAAEncryptionBenchmark.shortStringBenchmark                            1000  avgt   10   1.370 ± 0.048  us/op\n```\n\nSo the latter is better.",
      "parentUuid": "d546b274_4072ba3f",
      "revId": "e70c8f225544f4fd52757e96f358c3f7cd36d5b2",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "48314fd8_fc713e2e",
        "filename": "aaa-encrypt-service/impl/src/main/java/org/opendaylight/aaa/encrypt/impl/AAAEncryptionServiceImpl.java",
        "patchSetId": 3
      },
      "lineNbr": 97,
      "author": {
        "id": 1927
      },
      "writtenOn": "2025-01-24T20:02:03Z",
      "side": 1,
      "message": "Change for `AAAEncryptionBenchmark.java` to use `TimeUnit.MICROSECONDS`:\n\n```\ndiff --git a/aaa-encrypt-service/impl/src/main/java/org/opendaylight/aaa/encrypt/impl/AAAEncryptionBenchmark.java b/aaa-encrypt-service/impl/src/main/java/org/opendaylight/aaa/encrypt/impl/AAAEncryptionBenchmark.java\nindex 0a3537f8..bc0a8f10 100644\n--- a/aaa-encrypt-service/impl/src/main/java/org/opendaylight/aaa/encrypt/impl/AAAEncryptionBenchmark.java\n+++ b/aaa-encrypt-service/impl/src/main/java/org/opendaylight/aaa/encrypt/impl/AAAEncryptionBenchmark.java\n@@ -24,7 +24,7 @@ import org.openjdk.jmh.annotations.Warmup;\n \n @State(Scope.Thread)\n @BenchmarkMode(Mode.AverageTime)\n-@OutputTimeUnit(TimeUnit.MILLISECONDS)\n+@OutputTimeUnit(TimeUnit.MICROSECONDS)\n @Fork(1)\n @Threads(8)\n public class AAAEncryptionBenchmark {\n@@ -34,8 +34,8 @@ public class AAAEncryptionBenchmark {\n     public int iterations;\n \n     @Benchmark\n-    @Warmup(iterations \u003d 2, timeUnit \u003d TimeUnit.MILLISECONDS)\n-    @Measurement(iterations \u003d 10, timeUnit \u003d TimeUnit.MILLISECONDS)\n+    @Warmup(iterations \u003d 2, timeUnit \u003d TimeUnit.MICROSECONDS)\n+    @Measurement(iterations \u003d 10, timeUnit \u003d TimeUnit.MICROSECONDS)\n     public void decryptionAfterExceptionThrowBenchmark() throws Exception {\n         // Verify successful encryption/decryption.\n         final var before \u003d \"shortone\".getBytes();\n@@ -55,8 +55,8 @@ public class AAAEncryptionBenchmark {\n     }\n \n     @Benchmark\n-    @Warmup(iterations \u003d 2, timeUnit \u003d TimeUnit.MILLISECONDS)\n-    @Measurement(iterations \u003d 10, timeUnit \u003d TimeUnit.MILLISECONDS)\n+    @Warmup(iterations \u003d 2, timeUnit \u003d TimeUnit.MICROSECONDS)\n+    @Measurement(iterations \u003d 10, timeUnit \u003d TimeUnit.MICROSECONDS)\n     public void shortStringBenchmark() throws Exception {\n         final var before \u003d \"shortone\".getBytes();\n         final var encrypt \u003d SERVICE.encrypt(before);\n```\n\nChange for `AAAEncryptionServiceImpl.java` to use separate locks:\n\n```\ndiff --git a/aaa-encrypt-service/impl/src/main/java/org/opendaylight/aaa/encrypt/impl/AAAEncryptionServiceImpl.java b/aaa-encrypt-service/impl/src/main/java/org/opendaylight/aaa/encrypt/impl/AAAEncryptionServiceImpl.java\nindex 782737ae..bba187ea 100644\n--- a/aaa-encrypt-service/impl/src/main/java/org/opendaylight/aaa/encrypt/impl/AAAEncryptionServiceImpl.java\n+++ b/aaa-encrypt-service/impl/src/main/java/org/opendaylight/aaa/encrypt/impl/AAAEncryptionServiceImpl.java\n@@ -12,7 +12,6 @@ import static java.util.Objects.requireNonNull;\n \n import java.security.GeneralSecurityException;\n import java.util.Map;\n-import java.util.concurrent.ConcurrentHashMap;\n import javax.crypto.BadPaddingException;\n import javax.crypto.Cipher;\n import javax.crypto.IllegalBlockSizeException;\n@@ -21,6 +20,7 @@ import javax.crypto.SecretKeyFactory;\n import javax.crypto.spec.IvParameterSpec;\n import javax.crypto.spec.PBEKeySpec;\n import javax.crypto.spec.SecretKeySpec;\n+import org.checkerframework.checker.lock.qual.GuardedBy;\n import org.opendaylight.aaa.encrypt.AAAEncryptionService;\n import org.opendaylight.yang.gen.v1.config.aaa.authn.encrypt.service.config.rev160915.EncryptServiceConfig;\n import org.osgi.service.component.annotations.Activate;\n@@ -45,8 +45,13 @@ public final class AAAEncryptionServiceImpl implements AAAEncryptionService {\n     private final SecretKey key;\n     private final EncryptServiceConfig configuration;\n     private final IvParameterSpec ivSpec;\n-    // Thread-safe map of Cipher instances, keyed by Cipher mode (ENCRYPT_MODE, DECRYPT_MODE).\n-    private final Map\u003cInteger, Cipher\u003e ciphers \u003d new ConcurrentHashMap\u003c\u003e();\n+    private final Object encryptLock \u003d new Object();\n+    private final Object decryptLock \u003d new Object();\n+\n+    @GuardedBy(\"encryptLock\")\n+    private Cipher encryptCipher \u003d null;\n+    @GuardedBy(\"decryptLock\")\n+    private Cipher decryptCipher \u003d null;\n \n     public AAAEncryptionServiceImpl(final EncryptServiceConfig configuration) {\n         this.configuration \u003d configuration;\n@@ -60,8 +65,6 @@ public final class AAAEncryptionServiceImpl implements AAAEncryptionService {\n         } catch (GeneralSecurityException e) {\n             throw new IllegalStateException(\"Failed to initialize secret key\", e);\n         }\n-        ciphers.put(Cipher.ENCRYPT_MODE, initCipher(Cipher.ENCRYPT_MODE));\n-        ciphers.put(Cipher.DECRYPT_MODE, initCipher(Cipher.DECRYPT_MODE));\n     }\n \n     @Activate\n@@ -80,34 +83,38 @@ public final class AAAEncryptionServiceImpl implements AAAEncryptionService {\n     }\n \n     @Override\n-    public synchronized byte[] encrypt(final byte[] data) throws BadPaddingException, IllegalBlockSizeException {\n-        try {\n-            final var cipher \u003d getCipher(Cipher.ENCRYPT_MODE);\n-            return cipher.doFinal(requireNonNull(data));\n-        } catch (IllegalBlockSizeException | BadPaddingException e) {\n-            // Remove Cipher after exception and re-throw.\n-            ciphers.remove(Cipher.ENCRYPT_MODE);\n-            throw e;\n+    public byte[] encrypt(final byte[] data) throws BadPaddingException, IllegalBlockSizeException {\n+        synchronized (encryptLock) {\n+            if (encryptCipher \u003d\u003d null) {\n+                encryptCipher \u003d initCipher(Cipher.ENCRYPT_MODE);\n+            }\n+            try {\n+                return encryptCipher.doFinal(requireNonNull(data));\n+            } catch (IllegalBlockSizeException | BadPaddingException e) {\n+                // Remove Cipher after exception and re-throw.\n+                encryptCipher \u003d null;\n+                throw e;\n+            }\n         }\n     }\n \n     @Override\n-    public synchronized byte[] decrypt(final byte[] encryptedData) throws BadPaddingException,\n+    public byte[] decrypt(final byte[] encryptedData) throws BadPaddingException,\n             IllegalBlockSizeException {\n-        try {\n-            final var cipher \u003d getCipher(Cipher.DECRYPT_MODE);\n-            return cipher.doFinal(requireNonNull(encryptedData));\n-        } catch (IllegalBlockSizeException | BadPaddingException e) {\n-            // Remove Cipher after exception and re-throw.\n-            ciphers.remove(Cipher.DECRYPT_MODE);\n-            throw e;\n+        synchronized (decryptLock) {\n+            if (decryptCipher \u003d\u003d null) {\n+                decryptCipher \u003d initCipher(Cipher.DECRYPT_MODE);\n+            }\n+            try {\n+                return decryptCipher.doFinal(requireNonNull(encryptedData));\n+            } catch (IllegalBlockSizeException | BadPaddingException e) {\n+                // Remove Cipher after exception and re-throw.\n+                decryptCipher \u003d null;\n+                throw e;\n+            }\n         }\n     }\n \n-    private Cipher getCipher(final int mode) {\n-        return ciphers.computeIfAbsent(mode, this::initCipher);\n-    }\n-\n     private Cipher initCipher(final int mode) {\n         try {\n             final var cipher \u003d Cipher.getInstance(configuration.getCipherTransforms());\n```",
      "parentUuid": "785f75ba_ee6dc6e8",
      "revId": "e70c8f225544f4fd52757e96f358c3f7cd36d5b2",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "631a6ccc_91dfff85",
        "filename": "aaa-encrypt-service/impl/src/test/java/org/opendaylight/aaa/encrypt/impl/AAAEncryptServiceImplTest.java",
        "patchSetId": 3
      },
      "lineNbr": 149,
      "author": {
        "id": 1927
      },
      "writtenOn": "2025-01-22T23:15:35Z",
      "side": 1,
      "message": "This comment is a little confusing since `setup()` creates a new `AAAEncryptionServiceImpl` with new encrypt key \u0026 password generated by `OSGiEncryptionServiceConfigurator.generateConfig()`, not just a new cipher.",
      "revId": "e70c8f225544f4fd52757e96f358c3f7cd36d5b2",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "27e9d6a8_0bec16d3",
        "filename": "aaa-encrypt-service/impl/src/test/java/org/opendaylight/aaa/encrypt/impl/AAAEncryptServiceImplTest.java",
        "patchSetId": 3
      },
      "lineNbr": 149,
      "author": {
        "id": 8449
      },
      "writtenOn": "2025-01-23T17:24:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "631a6ccc_91dfff85",
      "revId": "e70c8f225544f4fd52757e96f358c3f7cd36d5b2",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    }
  ]
}